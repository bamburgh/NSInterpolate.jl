var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NSInterpolate","category":"page"},{"location":"#NSInterpolate","page":"Home","title":"NSInterpolate","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NSInterpolate.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NSInterpolate]","category":"page"},{"location":"#NSInterpolate.NSInterpolate","page":"Home","title":"NSInterpolate.NSInterpolate","text":"The code is a conversion from c# of that published by T. Naprstek and R. S. Smith (2019,  A new method for interpolating linear features in aeromagnetic data. Geophysics, 84(3),  JM15-JM24). I have used version NSI_v8 from github:     https://github.com/TomasNaprstek/Naprstek-Smith-Interpolation.\n\n\n\n\n\n","category":"module"},{"location":"#NSInterpolate.NSinterp-Tuple{String}","page":"Home","title":"NSInterpolate.NSinterp","text":"NSinterp(param_file)\n\nRead parameters from param_file into a dictionary, paramd, and call NSinterp(paramd)\n\nA more detailed explanation can go here, perhaps a ref to the paper.\n\nArguments\n\nparam_file: The name of the JSON file containing the input parameters.\n\nNotes\n\nThe parameter file contains values for the following input parameters:\n\ninput_xyz_file: Geosoft XYZ file containing the observed data\ninput_xyz_east: the name of the channel in `input_xyz_file` containing the eastings\ninput_xyz_north: the name of the channel in `input_xyz_file` containing the northings\ninput_xyz_value: the name of the channel in `input_xyz_file` containing the values to grid\ndatum: the geographic datum (e.g. WGS84) for the input data\nprojection: the geographic projection for the input data (e.g. \"NUTM17\")\noutputFile: the name of the netCDF4 file that the grid will be written to\ncellSize: edge size of each square cell in metres\ninterpDist: metres away that will be interpolated\nmaxLoop: the number of times the interpolation loop will be processed\nsearchStepSize: how much of a cell we will \"travel\" each search step\ncellSizeF: resampled final cell size\ntrendM: 100 - median % location (so 0 is no trending, 100 is full trending)\nautoStop: a checkbox of whether or not to auto stop\nangleSearch: the number of degrees it will move each time when searching away from the initial eigenvector\nmultiSmooth: smooth the multiplier grid before applying the normalization process (0 is no smoothing, 100 is max smoothing) (%)\nspatialSmooth: a checkbox of whether or not to use spatial smoothing (in almost all cases, should be used)\noutputwritebool: if 0, outputs in x y value. if 1, outputs in a format easy for importing into Oasis Montaj.\nrealGridLocations: if 0, outputs real data in the equi-distance grid cell locations. If 1, then output the real data cells as an average position of all real data within the cell.\n\nExamples\n\njulia>  NSinterp(\"tokens.json\")\n\nNSinterp\n  Julia version by Mark Dransfield after Naprstek and Smith\n  Version gamma!\n  Tue, 28 Jan 2025 10:37:51\n  6 threads.\n  Julia Version - 1.8.2\n\nAccessing XYZ data in 2205173_Blackall_AGG_Preliminary.xyz.\n\n  Found 141 header records\n  Found 230 lines\n  Found 43 channels\n\n  Starting anisotropic gridding loop, loop counter:  1 2 3 4 5 6 7 8 9 10\n\nEnd\n\n\n\n\n\n","category":"method"},{"location":"#NSInterpolate.initial_average-Tuple{Any, Any}","page":"Home","title":"NSInterpolate.initial_average","text":"Check through all grid cells, and if a cell has more than one reading in it: average the value over the number of readings. Also average the relative positions and restore the offset, so that the mean value is at the mean position and not at the centre, or a corner of, the cell. The flag for the cell is then set to 1.\n\n\n\n\n\n","category":"method"},{"location":"#NSInterpolate.initial_interpolation-NTuple{5, Any}","page":"Home","title":"NSInterpolate.initial_interpolation","text":"Now go through all cells, and assign values to the ones that have no data currently, or determine if they are too far away from real data to use. During this process we will also find all closest data to each cell which will be information needed when normalizing.\n\nThe meaning of the cell flag is changed and now becomes: +1: a cell that has observations within its borders;  0: a cell without observations within its borders and whose value has been interpolated; -1: a cell too far from data to be interpolated and which will remain un-filled.\n\n\n\n\n\n","category":"method"},{"location":"#NSInterpolate.obs_from_geoxyz-Tuple{Any}","page":"Home","title":"NSInterpolate.obs_from_geoxyz","text":"obs_from_geoxyz(xyz_file)\n\nRead a set of XYZ observation locations from a Geosoft XYZ file.\n\n\n\n\n\n","category":"method"},{"location":"#NSInterpolate.xyz_channels-Tuple{String, Integer, Integer}","page":"Home","title":"NSInterpolate.xyz_channels","text":"xyz_channels(file_name::String, num_head_recs::Integer, num_channels::Integer)\n\nGet the names of the channels in a Geosoft XYZ file_name. The algorithm checks  num_head_recs header records. If it finds one with a number of words equal to  the number of channels, num_channels, then it returns those words as an array  of channel names.\n\n\n\n\n\n","category":"method"},{"location":"#NSInterpolate.xyz_count","page":"Home","title":"NSInterpolate.xyz_count","text":"xyz_count(file_name::String)\n\nCount the number of header records, flight lines and channels in XYZ file.\n\nAlso the decimal precision of each channel in the Geosoft XYZ file.\n\nparams\n----------\nfile_name ::String\n    The name of the Geosoft XYZ file.\n\nReturns\n-------\nnum_head_recs ::Int\n    The .\nnum_lines ::Int\n    The .\nnum_channels ::Int\n    The .\nfield_precisions ::Int\n    The .\n\n\n\n\n\n","category":"function"},{"location":"#NSInterpolate.xyz_lines-Tuple{String, Any}","page":"Home","title":"NSInterpolate.xyz_lines","text":"xyz_lines(file_name::String, num_lines)\n\nReturns the line numbers (`line_ids`), and the number of fiducials in each line.\nA helper funtion for `xyz_to_whizz`.\n\nparams\n----------\nwhizz_file ::String\n    The name of the geoWhizz file.\n\nReturns\n-------\nNone\n\n\n\n\n\n","category":"method"}]
}
